#include "s21_matrix.h"

#test test_mult_num_1
  int res = 0;
  matrix_t A;
  matrix_t res_mul;
  s21_create_matrix(2, 2, &A);
  A.matrix[0][0] = 5;
  A.matrix[0][1] = 5;
  A.matrix[1][0] = 5;
  A.matrix[1][1] = 5;
  res = s21_mult_number(&A, 2, &res_mul);
  ck_assert_double_eq(10, res_mul.matrix[0][0]);
  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);
  s21_remove_matrix(&res_mul);

#test test_sub_matr_2
  int res = 0;
  matrix_t A, B;
  matrix_t res_sub;
  s21_create_matrix(1, 1, &A);
  s21_create_matrix(1, 1, &B);
  A.matrix[0][0] = 5;
  B.matrix[0][0] = 3;
  res = s21_sub_matrix(&A, &B, &res_sub);
  ck_assert_double_eq(2, res_sub.matrix[0][0]);
  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&res_sub);

#test test_sub_matr_4
  int res = 0, x = 4, y = 4;
  matrix_t A, B, res_sub;
  s21_create_matrix(x, y, &A);
  s21_create_matrix(x, y, &B);

  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  B.matrix[0][0] = 55;
  B.matrix[0][1] = 132;
  B.matrix[0][2] = 74;
  B.matrix[0][3] = 68;
  B.matrix[1][0] = 1;
  B.matrix[1][1] = 2;
  B.matrix[1][2] = 5;
  B.matrix[1][3] = 8;
  B.matrix[2][0] = 115;
  B.matrix[2][1] = 21;
  B.matrix[2][2] = 1;
  B.matrix[2][3] = 13;
  B.matrix[3][0] = 10;
  B.matrix[3][1] = 84;
  B.matrix[3][2] = 7;
  B.matrix[3][3] = 467;

  res = s21_sub_matrix(&A, &B, &res_sub);
  ck_assert_double_eq_tol(-32, res_sub.matrix[0][0], EPS_TEST);
  ck_assert_double_eq_tol(-77, res_sub.matrix[0][1], EPS_TEST);
  ck_assert_double_eq_tol(-62, res_sub.matrix[0][2], EPS_TEST);
  ck_assert_double_eq_tol(-63, res_sub.matrix[0][3], EPS_TEST);
  ck_assert_double_eq_tol(18, res_sub.matrix[1][0], EPS_TEST);
  ck_assert_double_eq_tol(331, res_sub.matrix[1][1], EPS_TEST);
  ck_assert_double_eq_tol(5, res_sub.matrix[1][2], EPS_TEST);
  ck_assert_double_eq_tol(35, res_sub.matrix[1][3], EPS_TEST);
  ck_assert_double_eq_tol(-16, res_sub.matrix[2][0], EPS_TEST);
  ck_assert_double_eq_tol(-17, res_sub.matrix[2][1], EPS_TEST);
  ck_assert_double_eq_tol(-1, res_sub.matrix[2][2], EPS_TEST);
  ck_assert_double_eq_tol(-5, res_sub.matrix[2][3], EPS_TEST);
  ck_assert_double_eq_tol(-10, res_sub.matrix[3][0], EPS_TEST);
  ck_assert_double_eq_tol(-65, res_sub.matrix[3][1], EPS_TEST);
  ck_assert_double_eq_tol(1, res_sub.matrix[3][2], EPS_TEST);
  ck_assert_double_eq_tol(-452, res_sub.matrix[3][3], EPS_TEST);

  ck_assert_int_eq(res, OK);

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&res_sub);

#test test_sub_matr_5
  int res = 0, x = 4, y = 4;
  matrix_t A, B, res_sub;
  s21_create_matrix(x, y, &A);
  s21_create_matrix(3, y, &B);

  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  B.matrix[0][0] = 55;
  B.matrix[0][1] = 132;
  B.matrix[0][2] = 74;
  B.matrix[0][3] = 68;
  B.matrix[1][0] = 1;
  B.matrix[1][1] = 2;
  B.matrix[1][2] = 5;
  B.matrix[1][3] = 8;
  B.matrix[2][0] = 115;
  B.matrix[2][1] = 21;
  B.matrix[2][2] = 1;
  B.matrix[2][3] = 13;

  res = s21_sub_matrix(&A, &B, &res_sub);
  ck_assert_int_eq(res, CALCULATION_ERROR);

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);

#test test_sum_matr_1
  int res = 0, x = 4, y = 4;
  matrix_t A, B;
  matrix_t res_sum;
  s21_create_matrix(x, y, &A);
  s21_create_matrix(x, y, &B);
  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  B.matrix[0][0] = 55;
  B.matrix[0][1] = 132;
  B.matrix[0][2] = 74;
  B.matrix[0][3] = 68;
  B.matrix[1][0] = 1;
  B.matrix[1][1] = 2;
  B.matrix[1][2] = 5;
  B.matrix[1][3] = 8;
  B.matrix[2][0] = 115;
  B.matrix[2][1] = 21;
  B.matrix[2][2] = 1;
  B.matrix[2][3] = 13;
  B.matrix[3][0] = 10;
  B.matrix[3][1] = 84;
  B.matrix[3][2] = 7;
  B.matrix[3][3] = 467;

  res = s21_sum_matrix(&A, &B, &res_sum);
  ck_assert_double_eq_tol(78, res_sum.matrix[0][0], EPS_TEST);
  ck_assert_double_eq_tol(187, res_sum.matrix[0][1], EPS_TEST);
  ck_assert_double_eq_tol(86, res_sum.matrix[0][2], EPS_TEST);
  ck_assert_double_eq_tol(73, res_sum.matrix[0][3], EPS_TEST);
  ck_assert_double_eq_tol(20, res_sum.matrix[1][0], EPS_TEST);
  ck_assert_double_eq_tol(335, res_sum.matrix[1][1], EPS_TEST);
  ck_assert_double_eq_tol(15, res_sum.matrix[1][2], EPS_TEST);
  ck_assert_double_eq_tol(51, res_sum.matrix[1][3], EPS_TEST);
  ck_assert_double_eq_tol(214, res_sum.matrix[2][0], EPS_TEST);
  ck_assert_double_eq_tol(25, res_sum.matrix[2][1], EPS_TEST);
  ck_assert_double_eq_tol(1, res_sum.matrix[2][2], EPS_TEST);
  ck_assert_double_eq_tol(21, res_sum.matrix[2][3], EPS_TEST);
  ck_assert_double_eq_tol(10, res_sum.matrix[3][0], EPS_TEST);
  ck_assert_double_eq_tol(103, res_sum.matrix[3][1], EPS_TEST);
  ck_assert_double_eq_tol(15, res_sum.matrix[3][2], EPS_TEST);
  ck_assert_double_eq_tol(482, res_sum.matrix[3][3], EPS_TEST);

  ck_assert_int_eq(res, OK);

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&res_sum);

#test test_sum_matr_2
  int res = 0, x = 4, y = 4;
  matrix_t A, B;
  matrix_t res_sum;
  s21_create_matrix(x, y, &A);
  s21_create_matrix(x, 3, &B);
  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  B.matrix[0][0] = 55;
  B.matrix[0][1] = 132;
  B.matrix[0][2] = 74;
  B.matrix[0][3] = 68;
  B.matrix[1][0] = 1;
  B.matrix[1][1] = 2;
  B.matrix[1][2] = 5;
  B.matrix[1][3] = 8;
  B.matrix[2][0] = 115;
  B.matrix[2][1] = 21;
  B.matrix[2][2] = 1;
  B.matrix[2][3] = 13;

  res = s21_sum_matrix(&A, &B, &res_sum);
  ck_assert_int_eq(res, CALCULATION_ERROR);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);

#test test_mult_matr
  int x = 4, y = 4, res = 0; 
  matrix_t A, B, res_mult_matr;
  s21_create_matrix(x, y, &A);
  s21_create_matrix(x, y, &B);
  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  B.matrix[0][0] = 55;
  B.matrix[0][1] = 132;
  B.matrix[0][2] = 74;
  B.matrix[0][3] = 68;
  B.matrix[1][0] = 1;
  B.matrix[1][1] = 2;
  B.matrix[1][2] = 5;
  B.matrix[1][3] = 8;
  B.matrix[2][0] = 115;
  B.matrix[2][1] = 21;
  B.matrix[2][2] = 1;
  B.matrix[2][3] = 13;
  B.matrix[3][0] = 10;
  B.matrix[3][1] = 84;
  B.matrix[3][2] = 7;
  B.matrix[3][3] = 467;
  res = s21_mult_matrix(&A, &B, &res_mult_matr);
  ck_assert_double_eq_tol(2750, res_mult_matr.matrix[0][0], EPS);
  ck_assert_double_eq_tol(3818, res_mult_matr.matrix[0][1], EPS);
  ck_assert_double_eq_tol(2024, res_mult_matr.matrix[0][2], EPS);
  ck_assert_double_eq_tol(4495, res_mult_matr.matrix[0][3], EPS);
  ck_assert_double_eq_tol(2958, res_mult_matr.matrix[1][0], EPS);
  ck_assert_double_eq_tol(6996, res_mult_matr.matrix[1][1], EPS);
  ck_assert_double_eq_tol(3382, res_mult_matr.matrix[1][2], EPS);
  ck_assert_double_eq_tol(24167, res_mult_matr.matrix[1][3], EPS);
  ck_assert_double_eq_tol(5529, res_mult_matr.matrix[2][0], EPS);
  ck_assert_double_eq_tol(13748, res_mult_matr.matrix[2][1], EPS);
  ck_assert_double_eq_tol(7402, res_mult_matr.matrix[2][2], EPS);
  ck_assert_double_eq_tol(10500, res_mult_matr.matrix[2][3], EPS);
  ck_assert_double_eq_tol(1089, res_mult_matr.matrix[3][0], EPS);
  ck_assert_double_eq_tol(1466, res_mult_matr.matrix[3][1], EPS);
  ck_assert_double_eq_tol(208, res_mult_matr.matrix[3][2], EPS);
  ck_assert_double_eq_tol(7261, res_mult_matr.matrix[3][3], EPS);
  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&res_mult_matr);

#test test_mult_matr_1
  int x = 3, y = 4, res = 0; 
  matrix_t A, B, res_mult_matr;
  s21_create_matrix(y, y, &A);
  s21_create_matrix(y, x, &B);
  
  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  
  B.matrix[0][0] = 55;
  B.matrix[0][1] = 132;
  B.matrix[0][2] = 74;
  B.matrix[1][0] = 1;
  B.matrix[1][1] = 2;
  B.matrix[1][2] = 5;
  B.matrix[2][0] = 115;
  B.matrix[2][1] = 21;
  B.matrix[2][2] = 1;
  B.matrix[3][0] = 10;
  B.matrix[3][1] = 84;
  B.matrix[3][2] = 7;
 
  res = s21_mult_matrix(&A, &B, &res_mult_matr);
  ck_assert_double_eq_tol(2750, res_mult_matr.matrix[0][0], EPS);
  ck_assert_double_eq_tol(3818, res_mult_matr.matrix[0][1], EPS);
  ck_assert_double_eq_tol(2024, res_mult_matr.matrix[0][2], EPS);
  ck_assert_double_eq_tol(2958, res_mult_matr.matrix[1][0], EPS);
  ck_assert_double_eq_tol(6996, res_mult_matr.matrix[1][1], EPS);
  ck_assert_double_eq_tol(3382, res_mult_matr.matrix[1][2], EPS);
  ck_assert_double_eq_tol(5529, res_mult_matr.matrix[2][0], EPS);
  ck_assert_double_eq_tol(13748, res_mult_matr.matrix[2][1], EPS);
  ck_assert_double_eq_tol(7402, res_mult_matr.matrix[2][2], EPS);
  ck_assert_double_eq_tol(1089, res_mult_matr.matrix[3][0], EPS);
  ck_assert_double_eq_tol(1466, res_mult_matr.matrix[3][1], EPS);
  ck_assert_double_eq_tol(208, res_mult_matr.matrix[3][2], EPS); 
  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&res_mult_matr);

#test test_mult_matr_2
  int x = 3, y = 4, res = 0; 
  matrix_t A, B, res_mult_matr;
  s21_create_matrix(y, y, &A);
  s21_create_matrix(y, x, &B);
  
  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  
  B.matrix[0][0] = 55;
  B.matrix[0][1] = 132;
  B.matrix[0][2] = 74;
  B.matrix[1][0] = 1;
  B.matrix[1][1] = 2;
  B.matrix[1][2] = 5;
  B.matrix[2][0] = 115;
  B.matrix[2][1] = 21;
  B.matrix[2][2] = 1;
  B.matrix[3][0] = 10;
  B.matrix[3][1] = 84;
  B.matrix[3][2] = 7;
 
  res = s21_mult_matrix(&B, &A, &res_mult_matr);
  ck_assert_double_eq(res, CALCULATION_ERROR);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);

#test test_create_matrix_1
  int x = 0, y = 0, res = 0;
  matrix_t A;
  res = s21_create_matrix(x, y, &A);
  ck_assert_int_eq(ERROR, res);

#test test_create_matrix_2
  int x = 5, y = 5, res = 0;
  matrix_t A;
  res = s21_create_matrix(x, y, &A);
  ck_assert_int_eq(OK, res);
  s21_remove_matrix(&A);

#test test_calc_complements_1
  int x = 4, y = 4, res = 0;
  matrix_t A, res_calc;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 23;
  A.matrix[0][1] = 55;
  A.matrix[0][2] = 12;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 333;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 43;
  A.matrix[2][0] = 99;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
 
  res = s21_calc_complements(&A, &res_calc);
  ck_assert_double_eq_tol(-19016, res_calc.matrix[0][0], EPS);
  ck_assert_double_eq_tol(-17990, res_calc.matrix[0][1], EPS);
  ck_assert_double_eq_tol(-415370, res_calc.matrix[0][2], EPS);
  ck_assert_double_eq_tol(244318,res_calc.matrix[0][3], EPS);
  ck_assert_double_eq_tol(2256,res_calc.matrix[1][0], EPS);
  ck_assert_double_eq_tol(-15332,res_calc.matrix[1][1], EPS);
  ck_assert_double_eq_tol(74386,res_calc.matrix[1][2], EPS);
  ck_assert_double_eq_tol(-20252,res_calc.matrix[1][3], EPS);
  ck_assert_double_eq_tol(-48436,res_calc.matrix[2][0], EPS);
  ck_assert_double_eq_tol(7122,res_calc.matrix[2][1], EPS);
  ck_assert_double_eq_tol(82224,res_calc.matrix[2][2], EPS);
  ck_assert_double_eq_tol(-52874,res_calc.matrix[2][3], EPS);
  ck_assert_double_eq_tol(25704,res_calc.matrix[3][0], EPS);
  ck_assert_double_eq_tol(46150,res_calc.matrix[3][1], EPS);
  ck_assert_double_eq_tol(-118636,res_calc.matrix[3][2], EPS);
  ck_assert_double_eq_tol(-341162,res_calc.matrix[3][3], EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);
  s21_remove_matrix(&res_calc); 

#test test_calc_complements_2
  int x = 5, y = 5, res = 0;
  matrix_t A, res_calc;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[0][4] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[1][4] = 12;
  A.matrix[2][0] = 14;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[2][4] = 5;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  A.matrix[3][4] = 5;
  A.matrix[4][0] = 7;
  A.matrix[4][1] = 12;
  A.matrix[4][2] = 21;
  A.matrix[4][3] = 2;
  A.matrix[4][4] = 17;
 
  res = s21_calc_complements(&A, &res_calc);
  ck_assert_double_eq_tol(4619, res_calc.matrix[0][0], EPS);
  ck_assert_double_eq_tol(8281, res_calc.matrix[0][1], EPS);
  ck_assert_double_eq_tol(-273, res_calc.matrix[0][2], EPS);
  ck_assert_double_eq_tol(-8195, res_calc.matrix[0][3], EPS);
  ck_assert_double_eq_tol(-6446, res_calc.matrix[0][4], EPS);
  ck_assert_double_eq_tol(13359, res_calc.matrix[1][0], EPS);
  ck_assert_double_eq_tol(7413, res_calc.matrix[1][1], EPS);
  ck_assert_double_eq_tol(16611, res_calc.matrix[1][2], EPS);
  ck_assert_double_eq_tol(-8151, res_calc.matrix[1][3], EPS);
  ck_assert_double_eq_tol(-30294, res_calc.matrix[1][4], EPS);
  ck_assert_double_eq_tol(-12810, res_calc.matrix[2][0], EPS);
  ck_assert_double_eq_tol(-10110, res_calc.matrix[2][1], EPS);
  ck_assert_double_eq_tol(-18930, res_calc.matrix[2][2], EPS);
  ck_assert_double_eq_tol(11418, res_calc.matrix[2][3], EPS);
  ck_assert_double_eq_tol(34452, res_calc.matrix[2][4], EPS);
  ck_assert_double_eq_tol(-6, res_calc.matrix[3][0], EPS);
  ck_assert_double_eq_tol(-210, res_calc.matrix[3][1], EPS);
  ck_assert_double_eq_tol(3378, res_calc.matrix[3][2], EPS);
  ck_assert_double_eq_tol(2838, res_calc.matrix[3][3], EPS);
  ck_assert_double_eq_tol(-4356, res_calc.matrix[3][4], EPS);
  ck_assert_double_eq_tol(-7019, res_calc.matrix[4][0], EPS);
  ck_assert_double_eq_tol(-4633, res_calc.matrix[4][1], EPS);
  ck_assert_double_eq_tol(-7071, res_calc.matrix[4][2], EPS);
  ck_assert_double_eq_tol(3971, res_calc.matrix[4][3], EPS);
  ck_assert_double_eq_tol(17006, res_calc.matrix[4][4], EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);
  s21_remove_matrix(&res_calc);

#test test_calc_complements_3
  int x = 5, y = 4, res = 0;
  matrix_t A, res_calc;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 14;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  A.matrix[4][0] = 7;
  A.matrix[4][1] = 12;
  A.matrix[4][2] = 21;
  A.matrix[4][3] = 2;
 
  res = s21_calc_complements(&A, &res_calc);
  ck_assert_int_eq(res, CALCULATION_ERROR);
  s21_remove_matrix(&A);

#test test_calc_complements_4
  int x = 1, y = 1, res = 0;
  matrix_t A, res_calc;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
 
  res = s21_calc_complements(&A, &res_calc);
  ck_assert_int_eq(res, CALCULATION_ERROR);
  s21_remove_matrix(&A);

#test test_determinant_1
  int x = 5, y = 5, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[0][4] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[1][4] = 12;
  A.matrix[2][0] = 14;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[2][4] = 5;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  A.matrix[3][4] = 5;
  A.matrix[4][0] = 7;
  A.matrix[4][1] = 12;
  A.matrix[4][2] = 21;
  A.matrix[4][3] = 2;
  A.matrix[4][4] = 17;
 
  res = s21_determinant(&A, &res_det);
  ck_assert_double_eq_tol(43824, res_det, EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);

 
#test test_determinant_2
  int x = 4, y = 4, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 14;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  
  res = s21_determinant(&A, &res_det);
  ck_assert_double_eq_tol(17006, res_det, EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);


#test test_determinant_3
  int x = 3, y = 3, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[2][0] = 14;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  
  res = s21_determinant(&A, &res_det);
  ck_assert_double_eq_tol(1496, res_det, EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);

#test test_determinant_4
  int x = 2, y = 2, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  A.matrix[0][1] = 12;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 6;
  
  res = s21_determinant(&A, &res_det);
  ck_assert_double_eq_tol(-204, res_det, EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);

#test test_determinant_5
  int x = 1, y = 1, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  
  res = s21_determinant(&A, &res_det);
  ck_assert_double_eq_tol(4, res_det, EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);

#test test_determinant_6
  int x = 2, y = 1, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 4;
  A.matrix[1][0] = 19;
  
  res = s21_determinant(&A, &res_det);

  ck_assert_int_eq(res, CALCULATION_ERROR);
  s21_remove_matrix(&A);

#test test_determinant_7
  int x = 4, y = 4, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  
  res = s21_determinant(&A, &res_det);
  ck_assert_double_eq_tol(0, res_det, EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);

#test test_determinant_8
  int x = 4, y = 4, res = 0;
  matrix_t A;
  double res_det = 0.0;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 4;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  
  res = s21_determinant(&A, &res_det);
  ck_assert_double_eq_tol(-2800, res_det, EPS);

  ck_assert_int_eq(res, OK);
  s21_remove_matrix(&A);

#test test_eq_matrix_1
  int x = 4, y = 4, res = 0;
  matrix_t A;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 4;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
  
  res = s21_eq_matrix(&A, &A);

  ck_assert_int_eq(res, SUCCESS);
  s21_remove_matrix(&A);

#test test_eq_matrix_2
  int x = 4, y = 4, res = 0;
  matrix_t A, B;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 4;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  s21_create_matrix(2, 2, &B);
  
  A.matrix[0][0] = 4;
  A.matrix[0][1] = 12;
  A.matrix[1][0] = 19;
  A.matrix[1][1] = 6;
 
  res = s21_eq_matrix(&A, &B);

  ck_assert_int_eq(res, FAILURE);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);


#test test_eq_matrix_3
  int x = 4, y = 4, res = 0;
  matrix_t A, B;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 4;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  s21_create_matrix(x, y, &B);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 1;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 4;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;
 
  res = s21_eq_matrix(&A, &B);

  ck_assert_int_eq(res, FAILURE);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);

#test test_inverse_matrix_1
  int x = 4, y = 4, res = 0;
  matrix_t A, res_inverse;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 4;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  res = s21_inverse_matrix(&A, &res_inverse);

  ck_assert_double_eq_tol(-0.271429, res_inverse.matrix[0][0], EPS_TEST);
  ck_assert_double_eq_tol(-0.118571, res_inverse.matrix[0][1], EPS_TEST);
  ck_assert_double_eq_tol(-0.195357, res_inverse.matrix[0][2], EPS_TEST);
  ck_assert_double_eq_tol(0.250000, res_inverse.matrix[0][3], EPS_TEST);
  ck_assert_double_eq_tol(0.114286, res_inverse.matrix[1][0], EPS_TEST);
  ck_assert_double_eq_tol(-0.034286, res_inverse.matrix[1][1], EPS_TEST);
  ck_assert_double_eq_tol(-0.041429, res_inverse.matrix[1][2], EPS_TEST);
  ck_assert_double_eq_tol(-0.000000, res_inverse.matrix[1][3], EPS_TEST);
  ck_assert_double_eq_tol(-0.028571, res_inverse.matrix[2][0], EPS_TEST);
  ck_assert_double_eq_tol(0.108571, res_inverse.matrix[2][1], EPS_TEST);
  ck_assert_double_eq_tol(-0.077143, res_inverse.matrix[2][2], EPS_TEST);
  ck_assert_double_eq_tol(0.000000, res_inverse.matrix[2][3], EPS_TEST);
  ck_assert_double_eq_tol(-0.057143, res_inverse.matrix[3][0], EPS_TEST);
  ck_assert_double_eq_tol(0.017143, res_inverse.matrix[3][1], EPS_TEST);
  ck_assert_double_eq_tol(0.145714, res_inverse.matrix[3][2], EPS_TEST);
  ck_assert_double_eq_tol(-0.000000, res_inverse.matrix[3][3], EPS_TEST);
  ck_assert_int_eq(res, OK);

  s21_remove_matrix(&A);
  s21_remove_matrix(&res_inverse);

#test test_inverse_matrix_2
  int x = 4, y = 4, res = 0;
  matrix_t A, res_inverse;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  res = s21_inverse_matrix(&A, &res_inverse);

  ck_assert_int_eq(res, ERROR);

  s21_remove_matrix(&A);

#test test_transpose_1
  int x = 4, y = 4, res = 0;
  matrix_t A, res_trans;
  s21_create_matrix(x, y, &A);
  
  A.matrix[0][0] = 0;
  A.matrix[0][1] = 12;
  A.matrix[0][2] = 3;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 0;
  A.matrix[1][1] = 6;
  A.matrix[1][2] = 10;
  A.matrix[1][3] = 7;
  A.matrix[2][0] = 0;
  A.matrix[2][1] = 4;
  A.matrix[2][2] = 0;
  A.matrix[2][3] = 8;
  A.matrix[3][0] = 4;
  A.matrix[3][1] = 19;
  A.matrix[3][2] = 8;
  A.matrix[3][3] = 15;

  res = s21_transpose(&A, &res_trans);

  ck_assert_double_eq_tol(0, res_trans.matrix[0][0], EPS_TEST);
  ck_assert_double_eq_tol(0, res_trans.matrix[0][1], EPS_TEST);
  ck_assert_double_eq_tol(0, res_trans.matrix[0][2], EPS_TEST);
  ck_assert_double_eq_tol(4, res_trans.matrix[0][3], EPS_TEST);
  ck_assert_double_eq_tol(12, res_trans.matrix[1][0], EPS_TEST);
  ck_assert_double_eq_tol(6, res_trans.matrix[1][1], EPS_TEST);
  ck_assert_double_eq_tol(4, res_trans.matrix[1][2], EPS_TEST);
  ck_assert_double_eq_tol(19, res_trans.matrix[1][3], EPS_TEST);
  ck_assert_double_eq_tol(3, res_trans.matrix[2][0], EPS_TEST);
  ck_assert_double_eq_tol(10, res_trans.matrix[2][1], EPS_TEST);
  ck_assert_double_eq_tol(0, res_trans.matrix[2][2], EPS_TEST);
  ck_assert_double_eq_tol(8, res_trans.matrix[2][3], EPS_TEST);
  ck_assert_double_eq_tol(5, res_trans.matrix[3][0], EPS_TEST);
  ck_assert_double_eq_tol(7, res_trans.matrix[3][1], EPS_TEST);
  ck_assert_double_eq_tol(8, res_trans.matrix[3][2], EPS_TEST);
  ck_assert_double_eq_tol(15, res_trans.matrix[3][3], EPS_TEST);
  ck_assert_int_eq(res, OK);

  s21_remove_matrix(&A); 
  s21_remove_matrix(&res_trans);


